[[https://www.gnu.org/licenses/gpl-3.0][https://img.shields.io/badge/License-GPLv3-blue.svg]]
[[https://github.com/GEUS-SICE/SICE/actions][file:https://github.com/GEUS-SICE/SICE/workflows/CI/badge.svg]]

* Table of Contents                               :toc_2:noexport:
- [[#sentinel-3a-s3a-albedo-euro-data-cube-edc-processing-pipeline][Sentinel-3A (S3A) Albedo Euro Data Cube (EDC) Processing Pipeline]]
  - [[#divide-area-into-tiles][Divide Area Into Tiles]]
  - [[#fetch-s3a-olci--slstr-products-using-sentinelhub-sh][Fetch S3A OLCI & SLSTR products using SentinelHub (SH)]]
  - [[#start-multiprocessing][Start Multiprocessing]]
  - [[#scda--ice-mask][SCDA & Ice Mask]]
  - [[#cams-aerosol][cams Aerosol]]
  - [[#pysice][pySICE]]
  - [[#mosaic][Mosaic]]
  - [[#outputs][Outputs]]
- [[#development-environment][Development Environment]
  - [[#python][Python]]

* Sentinel-3A (S3A) Albedo Euro Data Cube (EDC) Processing Pipeline

1. Divide Area Into Tiles
2. Fetch S3A OLCI & SLSTR products using SentinelHub (SH)
3. Start Multiprocessing
4. Simple Cloud Detection Algorithm (SCDA) & Masking Non-Ice/Snow areas
5. Get Forecasted Aerosol data from Copernicus Atmospgeric Monotoring Service (cams)
6. Compute outputs with pySICE
7. Merge all tiles into daily mosaics
8. Load all daily mosiacis to one multidimensional NetCDF file
9. Upload to Dataverse and Thredds Server

The steps above are encapsulated in [[./src/pysicehub.py]].

In more detail:

** Divide Area Into Tiles

+ Every area is divided into 50km x 50km tiles with a 10 km buffer 

** Fetch S3A OLCI & SLSTR products

+ Download OLCI and SLSTR products for each tile concurrently through SH
+ Donwloads the S3A scene with the lowest Sun Zenith Angle

** Start Multiprocessing 

+ Use a specified number of cores (default is 12) to process each tile in parrallel '

** Simple Cloud Detection Algorithm (SCDA) & Masking Non-Ice/Snow areas

+ Using SLSTR, clouds in every tile are detected and masked
+ Using a predifened mask, all areas in the tile that are not snow or ice are masked

** Get Forecasted Aerosol data from Copernicus Atmospgeric Monotoring Service (cams)
+ Download raw forecasted aerosol optical depth at 550 nm and 670 nm for each tile
+ interpolate and regrid to SICE 500m grid
+ compute ångstrøm paramter

** pySICE

+ Run [[./pysice.py]] on all tiles

** Mosaic
+ Merge all tiles into moasic

** Outputs
| File Name                     | Description                                                            | Units       |
|-------------------------------+------------------------------------------------------------------------+-------------|
| grain_diameter                |                                                                        | mm          |
| snow_specific_surface_area    |                                                                        | m^{2}kg^{-1}|
| sza                           | sun zenith angle                                                       |             |
| vza                           | viewing zenith angle                                                   |             |
| saa                           | sun azimuth angle                                                      |             |
| vaa                           | viewing azimuth angle                                                  |             |
| AOD_550                       | Aerosol Optical Depth (550nm)                                          | m           |
| ANG                           | ångstrøm parameter                                                     |             |
| albedo_bb_planar_nir          | near infrared broadband planar albedo                                  | 700-2400 nm |
| albedo_bb_planar_sw           | shortwave broadband planar albedo                                      | 300-2400 nm |
| albedo_bb_planar_vis          | visible broadband planar albedo                                        | 300-700 nm  |
| albedo_bb_spherical_nir       | near infrared broadband spherical albedo                               | 700-2400 nm |
| albedo_bb_spherical_sw        | shortwave broadband spherical albedo                                   | 300-2400 nm |
| albedo_bb_spherical_vis       | visible broadband spherical albedo                                     | 300-700 nm  |
| r_TOA_01..21_reflectance      | top of the atmosphere reflectance (OLCI bands 1 through 21)            |             |
| rBRR_01..21                   | bottom of the atmosphere surface reflectance (OLCI bands 1 through 21) |             |
| albedo_spectral_planar_01..21 | spectral planar albedo (OLCI bands 1 through 21)                       |             |
| isnow                         | See next table.                                                        |             |


| Diagnostic Code | Description                                                                                   |
|-----------------+-----------------------------------------------------------------------------------------------|
|               0 | clean snow                                                                                    |
|               1 | polluted snow                                                                                 |
|               6 | polluted snow for which r0 was calculated and not derived from observations                   |
|               7 | polluted snow of calculated spherical albedo in bands 1 and 2 >0.98 reprocessed as clean snow |
|             100 | sza>75, no retrival                                                                           |
|             102 | TOA reflectance at band 21 < 0.1, no retrieval                                                |
|             104 | grain_diameter < 0.1, no retrieval, potential cloud flag                                      |
|              -n | impossible to solve polluted snow albedo equation at band n                                   |


* Development Environment

** Python

Run the following using [[./environement.yml]] in order to set up an identical Anaconda Python environment.

#+BEGIN_SRC bash :results verbatim
conda env create -f environement.yml
#+END_SRC

And then run =conda activate SICE= to activate the SICE environment.

=ResolvePackageNotFound= error can be raised. In that case, run =conda env export --no-builds > environment.yml= instead. 

